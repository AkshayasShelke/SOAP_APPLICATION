using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Avalara.AvaTax.Adapter;
using Avalara.AvaTax.Adapter.TaxService;

namespace SOAP_Application
{
    public partial class TransactionForm : Form
    {

        public static GetTaxRequest getTaxRequest = new GetTaxRequest();
        public TaxSvc _taxService ;
        public GetTaxResult getTaxResult;
        public DocumentType docType;
        public bool statusCmp,statusLine,statusAdd;
        // public Line lno = new Line();
        public Line[] lno = new Line[15000];
        public static int cnt=0;
        DataTable table = new DataTable();
        public int selectedRow;
        public bool RValue1, RValue2, RValue3;
        public string ProdlineNo,CompCode,DocCode,Quantity,Amount,CustCode,SfLine,SfState,SfCity,SfZip,StLine,StState,StCity,StZip;

        private void butLoadResult_Click(object sender, EventArgs e)
        {
            getTaxRequest.Lines.Clear();
            RValue2 = SetLineDetails();
            DisplayResult();
        }

        private void TransactionForm_Load(object sender, EventArgs e)
        {

            table.Columns.Add("LineNo", typeof(string));
            table.Columns.Add("Quantity", typeof(string));
            table.Columns.Add("Amount", typeof(string));

            DgvLine.DataSource = table;

        }

        public TransactionForm()
        {

        }


        private void butUpdateLine_Click(object sender, EventArgs e)
        {
            //foreach (ListViewItem eachItem in ListViewLine.SelectedItems)
            //{
            //    txtLineNo.Text = eachItem.SubItems[0].Text;
            //    txtQuant.Text= eachItem.SubItems[1].Text;
            //    txtAmt.Text = eachItem.SubItems[2].Text;          
            //}
            DataGridViewRow newRow = DgvLine.Rows[selectedRow];
            newRow.Cells[0].Value = txtLineNo.Text;
            newRow.Cells[1].Value = txtQuant.Text;
            newRow.Cells[2].Value = txtAmt.Text;

        }


        private void DgvLine_CellClick(object sender,DataGridViewCellEventArgs e)
        {
            selectedRow = e.RowIndex;
            DataGridViewRow newRow = DgvLine.Rows[selectedRow];
            txtLineNo.Text = newRow.Cells[0].Value.ToString();
            txtQuant.Text = newRow.Cells[1].Value.ToString();
            txtAmt.Text = newRow.Cells[2].Value.ToString();
        }

        private void butDeleteLine_Click(object sender, EventArgs e)
        {
            //ListView Code
            //foreach (ListViewItem eachItem in ListViewLine.SelectedItems)
            //{
            //    ListViewLine.Items.Remove(eachItem);
            //}

            //DataGridView Code
            selectedRow = DgvLine.CurrentCell.RowIndex;
            DgvLine.Rows.RemoveAt(selectedRow);

        }

        public static string docStr;
        private void butAddLine_Click(object sender, EventArgs e)
        {
            //ListView with MultipleColumns Code
            //ProdlineNo = txtLineNo.Text;
            //Quantity = txtQuant.Text;
            //Amount = txtAmt.Text;
            //RValue2 =SetLineDetails(ProdlineNo, Quantity,Amount);

            //DataGridView Code



            table.Rows.Add(txtLineNo.Text,txtQuant.Text,txtAmt.Text);
            DgvLine.DataSource = table;
            txtLineNo.Clear();
            txtQuant.Clear();
            txtAmt.Clear();

        }


        public TransactionForm(TaxSvc taxService)
        {
            _taxService = taxService;

            InitializeComponent();
        }

       
        private void butGetTax_Click(object sender, EventArgs e)
        {

            _taxService.Configuration.Url = "https://development.avalara.net/Tax/TaxSvc.asmx?GetTax";

            //Header Section Start
            CompCode = txtCompCode.Text;
            CustCode = txtCustCode.Text;
            DocCode = txtDocCode.Text;
            if (DocCode == null)
            {
                RValue1= SetCompanyDetails1(CompCode, CustCode);
            }
            else
            {
                RValue1 = SetCompanyDetails2(CompCode, CustCode, DocCode);
            }
            

            //Line Section Start

            //**ListView Code for Line**
            //ProdlineNo = txtLineNo.Text;
            //Quantity = txtQuant.Text;
            //Amount = txtAmt.Text;
            //RValue2 =SetLineDetails(ProdlineNo, Quantity,Amount);

            //**DataGridView Code for Line**
            RValue2 = SetLineDetails();



            //Address Section Start
            SfLine = txtSfLine.Text;
            StLine = txtStLine.Text;
            SfCity = txtSfCity.Text;
            StCity = txtStCity.Text;
            SfState = txtSfState.Text;
            StState = txtStState.Text;
            SfZip = txtSfZip.Text;
            StZip = txtStZip.Text;

            if ((SfLine.Equals("") && SfCity.Equals("") && SfState.Equals("") && SfZip.Equals("")) && (!StLine.Equals("") || !StCity.Equals("") || !StState.Equals("") || !StZip.Equals("")))
            {
                RValue3=SetAddressDetailsOnlyShipTo(StLine, StCity, StState, StZip);
            }

            else if ((!SfLine.Equals("") || !SfCity.Equals("") || !SfState.Equals("") || !SfZip.Equals("")) && (StLine.Equals("") && StCity.Equals("") && StState.Equals("") && StZip.Equals("")))
            {
                RValue3 = SetAddressDetailsOnlyShipFrom(SfLine, SfCity, SfState, SfZip);
            }
            else
            {
                RValue3 = SetAddressDetails(SfLine, StLine, SfCity, StCity, SfState, StState, SfZip, StZip);
            }

            //Display Result Start
              DisplayResult();

        }

        public bool SetCompanyDetails1(string comp_code, string cust_code)
        {
            try
            {
                getTaxRequest.CompanyCode = comp_code;
                getTaxRequest.CustomerCode = cust_code;

                getTaxRequest.DocDate = txtDate.Value;
                docStr = cmbDocType.SelectedItem.ToString();
                Enum.TryParse<Avalara.AvaTax.Adapter.TaxService.DocumentType>(docStr, out docType);
                getTaxRequest.DocType = docType;
                statusCmp = true;
            }
            catch (Exception)
            {
                statusCmp = false;
            }

            return statusCmp;
        }

        public bool SetCompanyDetails2(string comp_code, string cust_code, string doc_code)
        {
            try
            {
                getTaxRequest.CompanyCode = comp_code;
                getTaxRequest.CustomerCode = cust_code;
                getTaxRequest.DocCode = doc_code;
                getTaxRequest.DocDate = txtDate.Value;
                docStr = cmbDocType.SelectedItem.ToString();
                Enum.TryParse<Avalara.AvaTax.Adapter.TaxService.DocumentType>(docStr, out docType);
                getTaxRequest.DocType = docType;
                statusCmp = true;
            }
            catch (Exception)
            {
                statusCmp = false;
            }

            return statusCmp;
        }

        //SetLineDetails Method for DataGridView Code
        public bool SetLineDetails()
        {
            int cnt = 1;
            string[,] myGridData = new string[(DgvLine.Rows.Count) - 1, (DgvLine.Columns.Count)];
            try
            {
               
                     foreach (DataGridViewRow row in DgvLine.Rows)
                     {
                       if (cnt <= ((DgvLine.Rows.Count) - 1))
                       {
                           foreach (DataGridViewColumn col in DgvLine.Columns)
                           {
                             myGridData[row.Index, col.Index] = DgvLine.Rows[row.Index].Cells[col.Index].Value.ToString();
                           }
                           ++cnt;
                        }
                     }

                int r;
                for (r = 0; r < DgvLine.Rows.Count - 1; r++)
                {
                    string quantity = myGridData[r, 1];
                    string amount = myGridData[r, 2];

                    Line lobj = new Line();
                    lno[r] = lobj;

                    if (quantity.Equals("") && amount.Equals(""))
                    {
                        lno[r].No = myGridData[r, 0];
                        getTaxRequest.Lines.Add(lno[r]);
                        statusLine = true;
                    }
                    else if(quantity.Equals("") && !amount.Equals(""))
                    {
                        lno[r].No = myGridData[r, 0];
                        lno[r].Amount = Convert.ToDecimal(amount);
                        getTaxRequest.Lines.Add(lno[r]);
                        statusLine = true;
                    }
                    else if(!quantity.Equals("") && amount.Equals(""))
                    {
                        lno[r].No = myGridData[r, 0];
                        lno[r].Qty = Convert.ToDouble(quantity);
                        getTaxRequest.Lines.Add(lno[r]);
                        statusLine = true;
                    }
                    else
                    {
                     lno[r].No = myGridData[r, 0];
                     lno[r].Qty = Convert.ToDouble(quantity);
                     lno[r].Amount = Convert.ToDecimal(amount);
                     getTaxRequest.Lines.Add(lno[r]);
                     statusLine = true;
                    }
                }
            }
            catch (Exception)
            {
                statusLine = false;
            }

            return statusLine;
        }



        //SetLineDetails Method for ListView Code
        //public bool SetLineDetails(string line_no,string quant,string amt)
        //{
        //    try
        //    {
        //        if(line_no.Equals(" ")||quant.Equals(" ")||amt.Equals(" ")||line_no==null||quant==null||amt==null)
        //        {
        //            statusLine = false;
        //        }
        //        else
        //        {
        //            if (cnt <= 15000)
        //            {
        //                Line lobj = new Line();
        //                lno[cnt] = lobj;
        //                lno[cnt].No = line_no;
        //                lno[cnt].Qty = Convert.ToDouble(quant);
        //                lno[cnt].Amount = Convert.ToDecimal(amt);       

        //                //ListViewItem lvi = new ListViewItem(line_no);
        //                //lvi.SubItems.Add(quant);
        //                //lvi.SubItems.Add(amt);
        //                //ListViewLine.Items.Add(lvi);
        //                getTaxRequest.Lines.Add(lno[cnt]);
        //                ++cnt;
        //                statusLine = true;
        //            }
        //            else
        //            {
        //                MessageBox.Show("No More Lines you add");
        //            }
        //        }
        //    }
        //    catch(Exception)
        //    {
        //        statusLine = false;
        //    }

        //    return statusLine;
        //}

        public bool SetAddressDetails(string Sf_Line, string St_Line, string Sf_City, string St_City, string Sf_State, string St_State, string Sf_Zip, string St_Zip)
        {
            try
            {
                    //ShipFrom
                    getTaxRequest.OriginAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.OriginAddress.Line1 = Sf_Line;
                    getTaxRequest.OriginAddress.City = Sf_City;
                    getTaxRequest.OriginAddress.Region = Sf_State;
                    getTaxRequest.OriginAddress.PostalCode = Sf_Zip;
                    //ShipTo
                    getTaxRequest.DestinationAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.DestinationAddress.Line1 = St_Line;
                    getTaxRequest.DestinationAddress.City = St_City;
                    getTaxRequest.DestinationAddress.Region = St_State;
                    getTaxRequest.DestinationAddress.PostalCode = St_Zip;
                    statusAdd = true;
            }
            catch(Exception)
            {
                statusAdd = false;
            }
            return statusAdd;
        }
        public bool SetAddressDetailsOnlyShipTo( string St_Line,string St_City,string St_State, string St_Zip)
        {
            try
            {
                if (!St_Line.Equals("") && !St_Zip.Equals(""))
                {
                    getTaxRequest.DestinationAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.DestinationAddress.Line1 = St_Line;
                    getTaxRequest.DestinationAddress.PostalCode = St_Zip;
                    statusAdd = true;
                }
                else if(!St_Line.Equals("") && !St_City.Equals("") && !St_State.Equals(""))
                {
                    getTaxRequest.DestinationAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.DestinationAddress.Line1 = St_Line;
                    getTaxRequest.DestinationAddress.City = St_City;
                    getTaxRequest.DestinationAddress.Region = St_State;
                    statusAdd = true;
                }
                else
                {
                    getTaxRequest.DestinationAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.DestinationAddress.Line1 = St_Line;
                    getTaxRequest.DestinationAddress.City = St_City;
                    getTaxRequest.DestinationAddress.Region = St_State;
                    getTaxRequest.DestinationAddress.PostalCode = St_Zip;
                    statusAdd = true;
                }
            }
            catch (Exception)
            {
                statusAdd = false;
            }
            return statusAdd;
        }
        public bool SetAddressDetailsOnlyShipFrom(string Sf_Line, string Sf_City, string Sf_State, string Sf_Zip)
        {
            try
            {
                if (!Sf_Line.Equals("") && !Sf_Zip.Equals(""))
                {
                    getTaxRequest.OriginAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.OriginAddress.Line1 = Sf_Line;
                    getTaxRequest.OriginAddress.PostalCode = Sf_Zip;
                    statusAdd = true;
                }
                else if (!Sf_Line.Equals("") && !Sf_City.Equals("") && !Sf_State.Equals(""))
                {
                    getTaxRequest.OriginAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.OriginAddress.Line1 = Sf_Line;
                    getTaxRequest.OriginAddress.City = Sf_City;
                    getTaxRequest.OriginAddress.Region = Sf_State;
                    statusAdd = true;
                }
                else
                {
                    getTaxRequest.OriginAddress = new Avalara.AvaTax.Adapter.AddressService.Address();
                    getTaxRequest.OriginAddress.Line1 = Sf_Line;
                    getTaxRequest.OriginAddress.City = Sf_City;
                    getTaxRequest.OriginAddress.Region = Sf_State;
                    getTaxRequest.OriginAddress.PostalCode = Sf_Zip;
                    statusAdd = true;
                }
               
            }
            catch (Exception)
            {
                statusAdd = false;
            }
            return statusAdd;
        }

        public void DisplayResult()
        {
            getTaxResult = _taxService.GetTax(getTaxRequest);
            if (RValue1 == false || RValue2 == false || RValue3 == false)
            {
                MessageBox.Show(getTaxResult.Messages[0].Summary.ToString());
            }
            else
            {
            txtResultCode.Text = Convert.ToString(getTaxResult.ResultCode);
            txtResultDocCode.Text = getTaxResult.DocCode;
            txtResultDocDate.Text = Convert.ToString(getTaxResult.DocDate);
            txtResultTotTaxable.Text = Convert.ToString(getTaxResult.TotalTaxable);
            txtResultTotAmt.Text = Convert.ToString(getTaxResult.TotalAmount);
            txtTotalTax.Text = Convert.ToString(getTaxResult.TotalTax);
            txtResultTotDisc.Text = Convert.ToString(getTaxResult.TotalDiscount);
            txtResultTransId.Text = getTaxResult.TransactionId;
            }
        }

        private void butLoadDefault_Click(object sender, EventArgs e)
        {
            cmbDocType.Text = "SalesInvoice";
            txtCompCode.Text = "AkshayaShelke";
            txtSfCity.Text = "BI";
            txtSfLine.Text = "900 winslow way e";
            txtSfState.Text = "WA";
            txtSfZip.Text = "98110";
            txtStCity.Text = "BI";
            txtStLine.Text = "900 winslow way e";
            txtStState.Text = "WA";
            txtStZip.Text = "98110";
        }

        private void butReset_Click(object sender, EventArgs e)
        {

            txtCompCode.Text = "";
            txtCustCode.Text = "";
            txtDocCode.Text = "";
            txtSfCity.Text = "";
            txtSfLine.Text = "";
            txtSfState.Text = "";
            txtSfZip.Text = "";
            txtStCity.Text = "";
            txtStLine.Text = "";
            txtStState.Text = "";
            txtStZip.Text = "";
            txtLineNo.Text = "";
            txtQuant.Text = "";
            txtAmt.Text = "";
            cmbDocType.Text = "";
        }
    }
}
